import { type Consumable } from '@/resources/game/models/consumable.model';

/**
 * Formatar o efeito de um consum√≠vel para exibi√ß√£o
 * @param consumable Consum√≠vel
 * @returns String formatada do efeito
 */
export function formatConsumableEffect(consumable: Consumable): string {
  if (!consumable.effect_value || consumable.effect_value <= 0) {
    return '';
  }

  switch (consumable.type) {
    case 'potion':
      if (consumable.description.includes('HP') || consumable.description.includes('Vida')) {
        return `+${consumable.effect_value} HP`;
      }
      if (consumable.description.includes('Mana')) {
        return `+${consumable.effect_value} Mana`;
      }
      return `+${consumable.effect_value}`;

    case 'buff':
      if (consumable.description.includes('For√ßa') || consumable.description.includes('ataque')) {
        return `+${consumable.effect_value} Ataque por 3 turnos`;
      }
      if (consumable.description.includes('Defesa')) {
        return `+${consumable.effect_value} Defesa por 3 turnos`;
      }
      return `+${consumable.effect_value} por 3 turnos`;

    case 'antidote':
      return 'Remove efeitos negativos';

    default:
      return `+${consumable.effect_value}`;
  }
}

/**
 * Formatar efeito baseado na descri√ß√£o do slot de po√ß√£o
 * @param effectValue Valor do efeito
 * @param description Descri√ß√£o do consum√≠vel
 * @returns String formatada do efeito
 */
export function formatPotionSlotEffect(effectValue: number, description: string): string {
  if (!effectValue || effectValue <= 0) {
    return '';
  }

  if (description.includes('HP') || description.includes('Vida')) {
    return `+${effectValue} HP`;
  }
  if (description.includes('Mana')) {
    return `+${effectValue} Mana`;
  }
  return `+${effectValue}`;
}

/**
 * Obter √≠cone do consum√≠vel baseado no tipo e descri√ß√£o
 * @param consumable Consum√≠vel
 * @returns String do emoji/√≠cone
 */
export function getConsumableIcon(consumable: Consumable): string {
  switch (consumable.type) {
    case 'potion':
      if (consumable.description.includes('HP') || consumable.description.includes('Vida')) {
        return '‚ù§Ô∏è';
      }
      if (consumable.description.includes('Mana')) {
        return 'üíô';
      }
      return 'üß™';

    case 'buff':
      if (consumable.description.includes('For√ßa') || consumable.description.includes('ataque')) {
        return '‚öîÔ∏è';
      }
      if (consumable.description.includes('Defesa')) {
        return 'üõ°Ô∏è';
      }
      return '‚ú®';

    case 'antidote':
      return 'üåø';

    default:
      return 'üì¶';
  }
}
