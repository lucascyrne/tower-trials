import{C as e,g as r}from"./main-BRzRyVm5.js";import{FloorService as o}from"./floor.service-r0yLIAYT.js";import"./unknown-BjZws6l5.js";import"./unknown-DE60C25c.js";import"./unknown-Chho9maJ.js";import"./unknown-CgHcGUJm.js";import"./unknown-CWUl0966.js";class s{static async processEnemyDefeat(s){try{const{player:t,currentEnemy:a,currentFloor:n}=s;if(!a||!n)return s;if(s.battleRewards)return s;const d=a.reward_xp||10,i=a.reward_gold||5,{xp:l,gold:c}=o.calculateFloorRewards(d,i,n.type),p=await e.grantSecureXP(t.id,l,"combat");if(!p.success)throw new Error(`Falha ao conceder XP: ${p.error}`);const u=p.data,m=await e.grantSecureGold(t.id,c,"combat");if(!m.success)throw new Error(`Falha ao conceder gold: ${m.error}`);const w=m.data;let g=[];if(a.possible_drops&&a.possible_drops.length>0){const e=r.processMonsterDrops(a.level,a.possible_drops,"boss"===n.type?1.5:1);if(e.length>0){const o=e.map((e=>e.drop_id)),s=await r.getDropInfoByIds(o);if(s.success&&s.data){g=e.map((e=>{const r=s.data.find((r=>r.id===e.drop_id));return{name:r?.name||`Item Desconhecido (${e.drop_id})`,quantity:e.quantity}}));const o=await r.addDropsToInventory(t.id,e);if(!o.success)throw new Error(`Falha ao persistir drops: ${o.error}`)}else g=e.map((e=>({name:`Item ${e.drop_id.substring(0,8)}...`,quantity:e.quantity})))}}const y={xp:l,gold:c,drops:g,leveledUp:u.leveled_up,newLevel:u.leveled_up?u.new_level:void 0},f={...t,xp:u.new_xp,level:u.new_level,gold:w};return{...s,player:f,battleRewards:y,isPlayerTurn:!0,gameMessage:`Inimigo derrotado! +${l} XP, +${c} Gold${y.leveledUp?" - LEVEL UP!":""}`}}catch(t){return{...s,isPlayerTurn:!0,gameMessage:`Erro ao processar derrota: ${t instanceof Error?t.message:"Erro desconhecido"}`}}}}export{s as RewardService};
