import{F as y,C as $,v as S}from"./index-B6lFmn7h.js";class f{static async processEnemyDefeat(l){try{console.log("[RewardService] Processando derrota do inimigo");const{player:s,currentEnemy:r,currentFloor:R}=l;if(!r||!R)return console.warn("[RewardService] Estado inválido para processar derrota do inimigo"),l;if(l.battleRewards)return console.warn("[RewardService] Tentativa de processar derrota de inimigo que já possui recompensas - ignorando"),l;const E=r.reward_xp||10,P=r.reward_gold||5,{xp:c,gold:d}=y.calculateFloorRewards(E,P,R.type);console.log(`[RewardService] Recompensas calculadas - XP: ${c}, Gold: ${d}`),console.log("[RewardService] === PERSISTINDO XP NO BANCO ===");const i=await $.grantSecureXP(s.id,c,"combat");if(!i.success)throw console.error("[RewardService] Erro ao conceder XP:",i.error),new Error(`Falha ao conceder XP: ${i.error}`);const o=i.data;console.log(`[RewardService] XP persistido - Level: ${o.new_level}, XP: ${o.new_xp}, Level Up: ${o.leveled_up}`),console.log("[RewardService] === PERSISTINDO GOLD NO BANCO ===");const t=await $.grantSecureGold(s.id,d,"combat");if(!t.success)throw console.error("[RewardService] Erro ao conceder gold:",t.error),new Error(`Falha ao conceder gold: ${t.error}`);const u=t.data;console.log(`[RewardService] Gold persistido - Total: ${u}`),console.log("[RewardService] === PROCESSANDO DROPS ===");let n=[],a=[];if(r.possible_drops&&r.possible_drops.length>0&&(console.log(`[RewardService] Monstro ${r.name} tem ${r.possible_drops.length} possible_drops`),a=S.processMonsterDrops(r.level,r.possible_drops,R.type==="boss"?1.5:1),console.log(`[RewardService] Drops obtidos: ${a.length} itens`),a.length>0)){const _=a.map(e=>e.drop_id),v=await S.getDropInfoByIds(_);v.success&&v.data?(n=a.map(e=>{const g=v.data.find(D=>D.id===e.drop_id);return{name:(g==null?void 0:g.name)||`Item Desconhecido (${e.drop_id})`,quantity:e.quantity}}),console.log("[RewardService] Drops identificados:",n.map(e=>`${e.quantity}x ${e.name}`).join(", "))):(console.error("[RewardService] Erro ao buscar informações dos drops:",v.error),n=a.map(e=>({name:`Item ${e.drop_id.substring(0,8)}...`,quantity:e.quantity}))),console.log("[RewardService] === PERSISTINDO DROPS NO BANCO ===");const w=await S.addDropsToInventory(s.id,a);if(!w.success)throw console.error("[RewardService] Erro ao persistir drops:",w.error),new Error(`Falha ao persistir drops: ${w.error}`);console.log(`[RewardService] ${w.data} drops persistidos com sucesso no inventário`)}const m={xp:c,gold:d,drops:n,leveledUp:o.leveled_up,newLevel:o.leveled_up?o.new_level:void 0},p={...s,xp:o.new_xp,level:o.new_level,gold:u};return console.log("[RewardService] === DERROTA PROCESSADA COM PERSISTÊNCIA ==="),console.log(`[RewardService] - Level: ${p.level} (Level Up: ${o.leveled_up})`),console.log(`[RewardService] - XP: ${p.xp}/${o.new_xp_next_level}`),console.log(`[RewardService] - Gold: ${p.gold}`),console.log(`[RewardService] - Drops: ${n.length} itens`),{...l,player:p,battleRewards:m,isPlayerTurn:!0,gameMessage:`Inimigo derrotado! +${c} XP, +${d} Gold${m.leveledUp?" - LEVEL UP!":""}`}}catch(s){return console.error("[RewardService] Erro ao processar derrota do inimigo:",s),{...l,isPlayerTurn:!0,gameMessage:`Erro ao processar derrota do inimigo: ${s instanceof Error?s.message:"Erro desconhecido"}`}}}}export{f as RewardService};
